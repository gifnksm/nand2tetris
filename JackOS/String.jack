/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field int len;
    field int maxLen;
    field Array data;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        let data = Memory.alloc(maxLength);
        let maxLen = maxLength;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do Memory.deAlloc(data);
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return len;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        if (j < 0 | ~(j < len)) {
            do Sys.error(15);
        }
        return data[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        if (j < 0 | ~(j < len)) {
            do Sys.error(16);
        }
        let data[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if ((len + 1) > maxLen) {
            do Sys.error(16);
        }
        let data[len] = c;
        let len = len + 1;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if (~(len > 0)) {
            do Sys.error(17);
        }
        let len = len - 1;
        return;
    }

    /** Returns the integer value of this string,
     *  until a non-digit character is detected. */
    method int intValue() {
        var int i, val, sign;
        if (data[0] = 45) { // '-'
            let sign = -1;
            let i = 1;
        } else {
            let sign = 1;
        }
        while ((i < len) & (47 < data[i]) & (data[i] < 58)) {
            let val = val * 10 + data[i] - 48;
            let i = i + 1;
        }
        if (sign < 0) {
            return -val;
        }
        return val;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        var int i, expLen, r;
        var boolean hasSign;
        if (val < 0) {
            let hasSign = true;
            let val = -val;
        }
        if (val > 9999) {
            let expLen = 5;
        } else {
            if (val > 999) {
                let expLen = 4;
            } else {
                if (val > 99) {
                    let expLen = 3;
                } else {
                    if (val > 9) {
                        let expLen = 2;
                    } else {
                        let expLen = 1;
                    }
                }
            }
        }
        if (hasSign) {
            let expLen = expLen + 1;
        }
        if (expLen > maxLen) {
            do Sys.error(19);
        }
        let len = 1;
        if (val = 0) {
            let data[0] = 48; // '0'
            return;
        }
        if (hasSign) {
            let data[0] = 45; // '-'
        }
        let len = expLen;
        let i = expLen - 1;
        while (val > 0) {
            let r = Math.modulo(val, 10);
            let val = Math.divide(val, 10);
            let data[i] = r + 48;
            let i = i - 1;
        }
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
