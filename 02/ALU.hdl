/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs,
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN
        x[16], y[16],  // 16-bit inputs
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
        Not16(in = x, out = not-x);
        Not16(in = y, out = not-y);

        Mux4Way16(a = x, b = false, c = not-x, d = true, sel[0] = zx, sel[1] = nx, out = lhs);
        Mux4Way16(a = y, b = false, c = not-y, d = true, sel[0] = zy, sel[1] = ny, out = rhs);

        And16(a = lhs, b = rhs, out = and);
        Add16(a = lhs, b = rhs, out = sum);
        Mux16(a = and, b = sum, sel[0] = f, out = res);

        Not16(in = res, out = not-res);
        Mux16(a = res, b = not-res, sel[0] = no, out = out, out[0..7] = out-low, out[8..15] = out-high, out[15] = ng);

        Or8Way(in = out-low, out = one-low);
        Or8Way(in = out-high, out = one-high);
        Or(a = one-low, b = one-high, out = one);
        Not(in = one, out = zr);
}
