/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O.
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory
 * location specified by address. If load==1, the in value is loaded
 * into the memory location specified by address. This value becomes
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used.
 * Access to address>0x6000 is invalid. Access to any address in
 * the range 0x4000-0x5FFF results in accessing the screen memory
 * map. Access to address 0x6000 results in accessing the keyboard
 * memory map. The behavior in these addresses is described in the
 * Screen and Keyboard chip specifications given in the book.
 */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
        // 1<<13 = 0x2000, 1<<14 = 0x4000
        //
        // address 13, 14
        // 0, 0: 0x0000 <= x < 0x2000 => RAM
        // 0, 1: 0x2000 <= x < 0x4000 => RAM
        // 1, 0: 0x4000 <= x < 0x6000 => Screen
        // 1, 1: 0x6000 <= x < 0x8000 => Keyboard

        DMux(in = load, sel = address[14], a = ram-load, b = screen-load);

        RAM16K(in = in, load = ram-load,    address = address[0..13], out = ram-out);
        Screen(in = in, load = screen-load, address = address[0..12], out = screen-out);
        Keyboard(out = keyboard-out);

        Mux4Way16(a = ram-out, b = ram-out, c = screen-out, d = keyboard-out, sel = address[13..14], out = out);
}
